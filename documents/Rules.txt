●迷路表示
　・扉は黄色。真正面に行くと取っ手が見える
　・壁の色は場所によって色が変わる（カラー迷路とか）
　・ある地点でメッセージが表示される（場所によっては方向を示すものもある）
　・他の冒険者
　　・歩いていると冒険者にエンカウント。いい冒険者（Talkできる）と悪い冒険者（Talkすると戦闘に入る）
　　・Talkした場合は、良い冒険者と悪い冒険者で結果が変わる
　　　・良い冒険者の場合（複数人）：「ONYX めざして がんばりましょう!」と言われる
　　　・良い冒険者の場合（1人）：仲間に誘う、励ます、金を出せ、の3つの行動を選べる
　　　　・仲間に誘う：パーティーに入れることができる、ただし5人いる場合はそのまま立ち去る
　　　　・別れる：何もせず別れる
　　　　・金を出せ：戦闘に入る
　　　・悪い冒険者の場合：戦闘に入る
　・街以外では、他の冒険者以外にモンスターにも遭遇する。ランダム、または固定。


●マップデータ
　　・マップデータ（壁、通路、扉）
　　・イベントデータ（位置、方向、イベント番号）
　　・今いる場所名
　　・エンカウントするキャラクターのリスト


●エンカウントするキャラクター
　・エンカウント時はマップのエンカウントするキャラクターからランダムで選び、データに基づいて敵キャラクターを生成する
　・データ
　　・0:冒険者（良）	体力		攻撃力	防御力	素早さ	出現1〜4	会話OK	お金なし	アイテムなし
　　・1:冒険者（悪）	体力		攻撃力	防御力	素早さ	出現1〜4	会話NG	お金なし	アイテムなし
　　・2:バット			体力		攻撃力	防御力	素早さ	出現3〜10 会話NG	お金なし	アイテムなし
　　・3:コボルド		体力		攻撃力	防御力	素早さ	


●街
　・街にいるときは星空が見える
　・武器屋、鎧屋、カブト屋、盾屋
　　・左右でアイテム切り替え（アイテム名と価格が表示されて、お店の人が持つ絵も変わる）
　　・上下で買うキャラクターを選ぶ、SPACEで決定、そのあと持たせるキャラクターを選ぶ
　　・Zで出る、入る直前の位置と方向に戻る
　・回復屋
　　・上下でキャラクターを選ぶ、選んだキャラクター名と治療費が表示される。
　　・SPACEで治療（お金が不足していたら治療できない）
　　・Zで出る、入る直前の位置と方向に戻る
　・薬屋
　　・器がないと薬が持てない
　　・器1つにつき薬を5個持てる


●戦闘
　・敵は最大10匹出現する
　・すべて同じ種類とする


●プレイヤー
　・最大5人パーティー
　・最初に最低1人は自分で作る必要がある
　・作る場合は、名前の入力（最大8文字、キーボード or 方向キーを使用）、頭と服を選ぶだけ、持っているアイテムは武器のナイフのみ
　・属性は以下
　　・名前
　　・頭の種類
　　・服装
　　・持っている武器
　　・着ている鎧
　　・かぶっているカブト
　　・持っている盾
　　・薬の器
　　・薬の数（最大5）
　　・お金
　　・体力
　　・攻撃力
　　・防御力
　　・素早さ
　　・経験値
　　・レベル


●敵データ
　・名前
　・イメージ情報
　　・横座標
　　・縦座標
　　・幅
　　・高さ
　・体力
　・攻撃力
　・防御力
　・素早さ



【キー入力】

初期値：
　キー離したフラグ=ON
　キー情報=None

キー入力判定：
　→キー離したフラグ=ON？
　　→Yes：押したキーの情報=保持、キー離したフラグ=OFF
　　→No：押したキーの情報=None

キー離した判定：
　→キー離したフラグ=ON
　→キー情報=None



【お店】

初期値：
　状態=0
　アイテム番号=0
　買う人=0
　持つ人=0

状態判定：
　→状態=0？
　　→Yes：店に入った時のメッセージ
　　　　　キー情報=SPACE？
　　　　　　→Yes：状態=1、アイテム番号=0
　　　　　　→No：何もしない
　→状態=1？
　　→Yes：アイテム番号のアイテムと値段、パーティーメンバーの所持金、メッセージ「どなたが　おかいあげですか？」表示
　　　　　キー情報=L？
　　　　　　→Yes：状態=4
　　　　　キー情報=1～5？
　　　　　　→Yes：メンバーリスト[キー情報] != None？
　　　　　　　　　　→Yes：買う人=キー情報、状態=2
　　　　　キー情報=ANY KEY？
　　　　　　→Yes：アイテム番号+=1（ただしアイテム番号＞アイテムリストの要素数なら0にする）
　→状態=2？
　　→Yes：メッセージ「どなたが　おつかいに　なりますか？」表示
　　　　　キー情報=L？
　　　　　　→Yes：状態=4
　　　　　キー情報=1～5？
　　　　　　→Yes：メンバーリスト[キー情報] != None？
　　　　　　　　　　→Yes：持つ人=キー情報、メンバーリスト[買う人]の所持金をマイナス、メンバーリスト[持つ人]の持ち物をアイテムリスト[アイテム番号]に変更、状態=3
　　　　　キー情報=ANY KEY？
　　　　　　→Yes：アイテム番号+=1（ただしアイテム番号＞アイテムリストの要素数なら0にする）、状態=1
　→状態=3？
　　→Yes：メッセージ「どうも　ありがとうございました。[SPACE]」表示
　　　　　キー情報=SPACE？
　　　　　　→Yes：状態=1
　→状態=4？
　　→Yes：メッセージ「またの　ごらいてん　おまちしております。[SPACE]」表示
　　　　　キー情報=SPACE？
　　　　　　→Yes：stateStack.pop()


BEWARE OF THE BEAST !


【戦闘】

■前提

enemyPartyが作成されていること
（こうすることで、イベントでも発生させることが可能）

■必要な情報
- playerParty
　- 
- enemyParty

■処理

共通：
　[render]
　→enemyPartyのステータスとキャラクターを描画する →キャラクタ描画はBaseStateで実施する
　→playerPartyのステータスとキャラクターを描画する →キャラクタ描画はBaseStateで実施する

State=0:STATE_ENCOUNT
　[render]
　→メッセージ表示
　　　なにか　ちかづいてきた！

　[update]
　→tick +=1
　→tick > 20？:
　　→Yes：State=1

State=1:STATE_SELECT_ACTION
　[render]
　→メッセージ表示
　　　どうしますか？
　　　[A] Attack
　　　[R] Run
　　　[T] Talk

　[update]
　→コマンド入力
　　→戦う？
　　　→Yes：State=2
　　→逃げる？
　　　→Yes：State=5
　　→話す:
　　　→Yes：State=?

State=2:STATE_START_BATTLE
　[render]
　→メッセージ表示：
　　　** BATTLE **

　[update]
　→少し待つ
　→State=3

State=3:STATE_SELECT_TARGET
　[render]
　→メッセージ表示
　　　どれを　こうげき　しますか、[NAME] ?
　　　[1] [ENEMY NAME1]
　　　[2] [ENEMY NAME2]
　　　[3] [ENEMY NAME3]
　　　[4] [ENEMY NAME4]
　　　[5] [ENEMY NAME5]
　　※enemyPartyの数だけ表示するが、最大で5つ

　[update]
　→パーティーメンバー全員の行動を入力した？
　　→Yes：State=3 
　　→No：パーティーメンバーの攻撃対象を入力（1～5、ただし画面に表示されているものだけ対象）

State=3:STATE_SET_ENEMY_ACTION
　[render]
　→処理なし

　[update]
　→敵の逃走判定
　　→0〜99の乱数生成
　　→乱数 ‹ 逃走確率？
　　　→Yes：敵逃走処理へ（State=?）
　→すべての敵の行動を決定する：
　　→攻撃対象のパーティーメンバー選択（ランダム）
　　→プレイヤーパーティーと敵パーティー全員を行動順リストに追加する、この時に以下パラメータに乱数を加えて戦闘値とする
　　　　素早さ
　　　　攻撃力
　　　　防御力
　　→行動順リストを、戦闘値の素早さの降順でソート
　　→行動順リストインデックス=0
　　→メッセージリスト初期化
　　→State=4

State=4：STATE_BATTLE
　[render]
　→メッセージリスト0～5の内容を画面に表示する
　→少しウェイト

　[update]
  →行動順リストの全てについて処理を終えた？
    →Yes：State=1
  →行動順リストの行動対象キャラクターについて、以下を処理：
  　→行動順リストの行動対象の要素がNoneではなく、かつ攻撃対象は行動順リストに存在する場合は以下を処理：
　　　→[行動順リストのキャラクタの攻撃力] < [攻撃対象のキャラクタの素早さ]の場合：
　　　　→メッセージリストに以下を追加
　　　　　　[行動順リストのキャラクタの名前] は [攻撃対象のキャラクタの名前] を よけた。 <水色>
　　　→[行動順リストのキャラクタの攻撃力] <= [攻撃対象のキャラクタの防御力]の場合：
　　　　→メッセージリストに以下を追加
　　　　　　[行動順リストのキャラクタの名前] は [攻撃対象のキャラクタの名前] を うけとめた。 <水色>
　　　→上記以外の場合：
　　　　→damage = [行動順リストのキャラクタの戦闘値の攻撃力] - [攻撃対象のキャラクタの戦闘値の防御力]
　　　　→[攻撃対象のキャラクタのHP] - damage < 1 の場合：
　　　　　→メッセージリストに以下を追加
　　　　　　　[行動順リストのキャラクタの名前] は [攻撃対象のキャラクタの名前] を しとめた ! <赤>
　　　　　→報酬経験値＝報酬経験値＋攻撃対象のキャラクタの経験値
　　　　　→報酬ゴールド＝報酬ゴールド＋攻撃対象のキャラクタのゴールド
　　　　　→行動順リストの対象の要素をNoneにする
　　　　→上記以外の場合：
　　　　　→メッセージリストに以下を追加
　　　　　　　[行動順リストのキャラクタの名前] は [攻撃対象のキャラクタの名前] に [damage] のダメージをあたえた ! <ピンク>
　　　　　→[攻撃対象のキャラクタのHP] = [攻撃対象のキャラクタのHP] - damage
　→行動順リストのインデックス += 1

State=5：STATE_RUNAWAY
　[render]

　[update]
　→[プレイヤーパーティーの素早さ合計] < [敵パーティーの素早さ合計]？
　　→Yes：


【3D迷路】

■データの持ち方

　１ブロック内で各方向で２ビットで壁などの情報を定義する、イメージは以下：

　　　１
　　＋－＋
　４｜　｜２
　　＋－＋
　　　３

　壁の情報は以下：
　0x00 (0)：何もなし
　0x01 (1)：通り抜けられない壁
　0x10 (2)：通り抜けられる壁（ドア）
　0x11 (3)：通り抜けられない壁（黒）
　※値 & 0x01 = 1 の場合は通り抜けられない

　上記から１ブロックの壁データは以下のように定義される：

　0b00000000
　  44332211

　壁データは下位２ビットが方向に対する正面の情報になるよう、２ビットずつ左ローテートさせる：
　　東方向を向いている場合：11443322
　　南方向を向いている場合；22114433
　　西方向を向いている場合：33221144

■描画処理

　描画は、以下のルールに従う：
　・視界に対して正面を向いている壁の情報を描画する
　・視界に対して背面を向いている壁の情報は描画しない

　具体的な例を挙げる：

　　＋１＋＋１＋＋１＋
　　１　００　１１　１
　　＋１＋＋１＋＋０＋
　　＋１＋＋０＋＋０＋
　　０　００＃２２　０
　　＋０＋＋０＋＋０＋

　＃がプレイヤーのいる座標で、左上から右方向に向かって順に１，２、・・・とすると、
　　１：上の壁（& 0b00000011）はプレイヤーから見て正面なので描画する。
　　　　右の壁（& 0b00001100）はプレイヤーから見て背面なので描画しない。
　　　　下の壁（& 0b00110000）もプレイヤーから見て背面なので描画しない。
　　　　左の壁（& 0b11000000）はプレイヤーから見て正面なので描画する。
　　　　→１番目のブロックは、上と左だけを判断して描画する（& 0b11000011 = 1）
　　２；上の壁（& 0b00000011）はプレイヤーから見て正面なので描画する。
　　　　右の壁（& 0b00001100）もプレイヤーから見て正面なので描画する。
　　　　下の壁（& 0b00110000）はプレイヤーから見て背面なので描画しない。
　　　　左の壁（& 0b11000000）はプレイヤーから見て正面なので描画する。
　　　　→２番目のブロックは、上と左右を判断して描画する（& 0b11001111 = 1）
　　３：上の壁（& 0b00000011）はプレイヤーから見て正面なので描画する。
　　　　右の壁（& 0b00001100）もプレイヤーから見て正面なので描画する。
　　　　下の壁（& 0b00110000）はプレイヤーから見て背面なので描画しない。
　　　　左の壁（& 0b11000000）もプレイヤーから見て背面なので描画しない。
　　　　→３番目のブロックは、上と右だけを判断して描画する（& 0b00001111 = 1）
　　４：１番目と同様につき省略
　　５；２番目と同様につき省略
　　６：３番目と同様につき省略

　この例だと、プレイヤーから見て正面については、何もない通路に見えている。
　しかし、一歩前に進んで振り返ると壁になっており、一方通行となる。
　この他の壁のように、普通の壁（またはドア）にする場合は、隣り合う壁データの値を揃える必要がある。

■移動判定

　プレイヤーのいるブロックの壁情報 & 0b00000001 = 1 の場合（＝正面が通り抜けられない壁）は、移動不可とする。
　
■右に２ビットローテートする処理

def right_2bit_rotate(n):
    return ((n >> 2) & 0b11111111) | ((n & 0b00000011) << 6)

■左に２ビットローテートする処理

def left_2bit_rotate(n):
    return ((n << 2) & 255) | (n >> 6)
